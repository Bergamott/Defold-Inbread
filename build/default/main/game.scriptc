
ö√
É√local level_data = {}
local restaurants = {}
local belts = {}
local num_belts = 1
local belt_y = {}
local belt_speeds = {}
level = 1
local lev_data = {}
local num_plates = 1
local plate_x = {}
local plates = {}
local ingredients = {}
local sandwiches = {}
local plate_catchers = {}

local scale_vec
local state = 0
local ingredient_interval = 10
local ingredient_timer = 0

local ingredient_distribution
local fall_speed = 300.0
local fall_easing = {-0.1,0,0.1,0.25,0.45,0.70,1.0,0.9,1.0}
local fall_easing_vec

local shown_orders
local visible_orders = {0,0,0}

local score

local condiment_interval
local condiment_timer
local condiment_dist
local condiments = {}
local condiment_colors = {vmath.vector4(0.93, 0.20, 0.14, 1),
	 vmath.vector4(0.58, 0.53, 0.03, 1),
	 vmath.vector4(0.95, 0.61, 0.28, 1),
	 vmath.vector4(1.0, 1.0, 1.0, 1),
	 vmath.vector4(0.61, 0.02, 0.12, 1)}
local condiment_scores = {4,5,6,6,5, 0}

local backgrounds = {hash("kitchen0@2x"), hash("kitchen1@2x"), hash("kitchen2@2x")}

local animal_timer
local animal_interval
local animal_dist
local animals = {}

local function play_sound(self, snd)
	if settings_table["sound_on"] then
		msg.post(snd, "play_sound")
	end
end

local function start_music(self)
	if settings_table["music_on"] then
		msg.post("#song" .. (1+((level-1)%4)), "play_sound")
	end
end

local function stop_music(self)
	msg.post("#song" .. (1+((level-1)%4)), "stop_sound")
end

local function generate_belts(self)
	local b_sp = lev_data["belts"]
	num_belts = #b_sp
	local belt_spacing = 525/(num_belts + 1)
	local y = belt_spacing
	for i=1,num_belts do
		belt_y[i] = y
		belt_speeds[i] = b_sp[i]*2
		local b = factory.create("#belt_factory",vmath.vector3(160,600+40*scale_vec.y,0.01), nil, {speed=belt_speeds[i]},scale_vec)
		msg.post(b, "set_parent", { parent_id = go.get_id() })
		belts[i] = b
		go.animate(b,"position.y",go.PLAYBACK_ONCE_FORWARD,2*y,go.EASING_INQUAD,0.6,i*0.3)
		y = y + belt_spacing
	end
	ingredient_interval = 180/belt_speeds[num_belts]
	if ingredient_interval < 0 then
		ingredient_interval = - ingredient_interval
	end
	play_sound(self,"#level")
	msg.post("game#gui", "show_level", {level_num = level})
end

local function start_clock(self)
	self.shown_orders = 0
	self.visible_orders = {0,0,0}
	msg.post("game#gui","start_clock", {max_time = lev_data["time"]})
	start_music(self)
end

local function generate_plates(self)
	num_plates = lev_data["plates"]
	plate_catchers = {}
	local plate_spacing = (640-150*num_plates)/(num_plates+1)
	local x = plate_spacing+75
	for i=1,num_plates do
		plate_x[i] = x
		local p = factory.create("#plate_factory",vmath.vector3(360,0,0.01), nil, {}, scale_vec)
		msg.post(p, "set_parent", { parent_id = go.get_id() })
		plates[i] = p
		if i == num_plates then
			go.animate(p,"position.x",go.PLAYBACK_ONCE_FORWARD,x,go.EASING_OUTQUAD,0.6,i*0.3, start_clock)
		else
			go.animate(p,"position.x",go.PLAYBACK_ONCE_FORWARD,x,go.EASING_OUTQUAD,0.6,i*0.3)
		end
		local catcher = factory.create("#sandwich_factory",vmath.vector3(360,18*scale_vec.y,0.01), nil,
    			{type = 0}, scale_vec)
		msg.post(catcher, "set_parent", { parent_id = go.get_id() })
		plate_catchers[i] = catcher
		go.animate(catcher,"position.x",go.PLAYBACK_ONCE_FORWARD,x,go.EASING_LINEAR,1.0)
	
		x = x + plate_spacing + 150
	end
end

local function activate(self, lev)
	local restaurant_num = 1+math.floor((lev-1)/12)
    msg.post("#background", "play_animation", {id = backgrounds[restaurant_num]})

	scale_vec = go.get_scale_vector()
	scale_vec.y = scale_vec.y * ratio / 0.5625
	level = lev
	local restaurant = restaurants[restaurant_num]
	local lev_list = restaurant["levels"]
	
	lev_data = lev_list[1+((level-1)%12)]
	go.set_position(vmath.vector3(0,0,0))
	
	generate_belts(self)
	generate_plates(self)
	
	ingredient_distribution = {}
	local order_types = lev_data["orders"]
	for i=1,#order_types do
		local sandwich = order_types[i]
		for j=1,string.len(sandwich) do
			table.insert(ingredient_distribution,sandwich:sub(j,j)+1)
		end
	end
	ingredients = {}
	sandwiches = {}
	ingredient_timer = ingredient_interval*0.5
	
	condiment_dist = lev_data["condiments"]
	if condiment_dist == nil then
		condiment_interval = 0
	else
		condiment_interval = lev_data["condimentInterval"]
	end
	condiment_timer = 0
	
	animal_dist = lev_data["animalTypes"]
	if animal_dist == nil then
		animal_interval = 0
	else
		animal_interval = lev_data["animalInterval"]
	end
	animal_timer = 0
	
	state = 1
	self.score = 0
end

local function deactivate(self)
	state = 0
	go.set_position(vmath.vector3(0,0,-5))
end

local function halt_everything(self)
	state = 2
	for i, b in ipairs(belts) do
		msg.post(b,"halt")
	end
	for i, ing in ipairs(ingredients) do
  		msg.post(ing, "halt")
	end
	for i, sw in ipairs(sandwiches) do
  		msg.post(sw, "halt")
	end
	stop_music(self)
end

local function get_next_order(self)
	local order_types = lev_data["orders"]
	self.shown_orders = self.shown_orders + 1
	if self.shown_orders <= #order_types then
		if self.visible_orders[1] == 0 then
			self.visible_orders[1] = self.shown_orders
		elseif self.visible_orders[2] == 0 then
			self.visible_orders[2] = self.shown_orders
		else
			self.visible_orders[3] = self.shown_orders
		end
		msg.post("game#gui","show_order", {order_num = self.shown_orders, order_content = order_types[self.shown_orders]})
	else
		-- Check if level done
		if self.visible_orders[1] == 0 and self.visible_orders[2] == 0 and
			self.visible_orders[3] == 0 and state == 1 then
			halt_everything(self)
			msg.post("game#gui","level_done")
		end
	end
end

local function do_rating(self, score)
	local res
	if score >= 15*#ingredient_distribution then
		-- Great
		res = 3
	elseif score >= 10*#ingredient_distribution then
		-- Good
		res = 2
	else
		-- OK
		res = 1
	end
	msg.post("controller#script","store_result",{result = res})
	msg.post("game#gui","rating_done",{rating = res})
end

function init(self)
    deactivate(self)
    level_data = json.decode(sys.load_resource("/main/resources/levels.txt"))
    restaurants = level_data["restaurants"]
    fall_easing_vec = vmath.vector(fall_easing)
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

local function spawn_fly(self)
	local fly = nil
	local sandwich = nil
	local best_dist = 140*140
	local best_x
	local best_y
	for i,s in ipairs(sandwiches) do
		local script_url = msg.url(nil, s, "script")
		if go.get(script_url, "sandwich_state") == 1 then
			local sand_pos = go.get_world_position(s)
			local final_y = sand_pos.y+go.get(script_url, "slice_height") + 8
			local final_x = sand_pos.x + 0.5*belt_speeds[go.get(script_url, "belt_num")]*(580-final_y)/200
			if (final_x-160)*(final_x-160) < best_dist then
				best_dist = (final_x-160)*(final_x-160)
				sandwich = s
				best_x = final_x
				best_y = final_y
			end
		end
	end
	if sandwich == nil then
		-- Don't spawn
	else
		local start_vector = vmath.vector3(best_x-7, 580, 0.5)
		fly = factory.create("#animal_factory",start_vector, nil,
    		{type = 1, end_y = best_y}, scale_vec)
		msg.post(fly, "set_parent", { parent_id = go.get_id() })
		msg.post(fly, "set_target", {target = sandwich})
	end
	return fly
end

local function spawn_goo(self)
	local belt_num = math.random(num_belts-1)
	local start_vector = vmath.vector3(0,0,0.02)
    start_vector.y = belt_y[belt_num] - 14*scale_vec.y
    local end_x
    if belt_speeds[belt_num] > 0 then
    	start_vector.x = -40
    	end_x = 360
    else
    	start_vector.x = 360
    	end_x = -40
    end
    local goo = factory.create("#animal_factory",start_vector, nil,
    	{type = 2, end_x = end_x*2, move_time = 2*(end_x-start_vector.x)/belt_speeds[belt_num],
    	belt_num = belt_num }, scale_vec)
    msg.post(goo, "set_parent", { parent_id = go.get_id() })
	return goo
end

local function spawn_ketchup(self)
	local belt_num = math.random(num_belts-1)
	local start_vector = vmath.vector3(0,0,0.02)
    start_vector.y = belt_y[belt_num] + 60*scale_vec.y
    local end_x
    if belt_speeds[belt_num] > 0 then
    	start_vector.x = -40
    	end_x = 360
    else
    	start_vector.x = 360
    	end_x = -40
    end
    local ketchup = factory.create("#animal_factory",start_vector, nil,
    	{type = 3, end_x = end_x*2, move_time = 2*(end_x-start_vector.x)/belt_speeds[belt_num],
    	belt_num = belt_num}, scale_vec)
    msg.post(ketchup, "set_parent", { parent_id = go.get_id() })
	return ketchup
end

local function drop_ketchup(self, bottle)
	local pos = go.get_world_position(bottle)
	local script_url = msg.url(nil, bottle, "script")
	local b_num = go.get(script_url, "belt_num")-1
	local target_sandwich = nil
	local from_y = pos.y - 40*scale_vec.y
	local target_y = - 30
	pos.z = 0.9
	if b_num > 0 then
		for i,s in ipairs(sandwiches) do
			script_url = msg.url(nil, s, "script")
			if go.get(script_url, "belt_num") == b_num then
				local s_pos = go.get_world_position(s)
				local to_y = s_pos.y + go.get(script_url, "slice_height")
				local fall_time = (from_y - to_y) / fall_speed
				local new_x = s_pos.x
				if b_num > 0 then
					new_x = new_x + belt_speeds[b_num] * fall_time
				end
				if pos.x < new_x + 33 and pos.x > new_x - 33 then
					target_y = to_y
					target_sandwich = s
				end
			end
		end
	else
		for i,s in ipairs(plate_catchers) do
			script_url = msg.url(nil, s, "script")
			if go.get(script_url, "belt_num") == b_num then
				local s_pos = go.get_world_position(s)
				local s_height = go.get(script_url, "slice_height")
				if s_height > 0 then
					local to_y = s_pos.y + s_height
					local fall_time = (from_y - to_y) / fall_speed
					if pos.x < s_pos.x + 33 and pos.x > s_pos.x - 33 then
						target_y = to_y
						target_sandwich = s
					end
				end
			end
		end
	end
	if target_y < 0 and b_num > 0 then
		target_y = belt_y[b_num] 
	end

	local drop = factory.create("#drop_factory", pos, nil,
    	{belt_num = b_num, target_y = target_y, fall_time = (from_y - target_y)/fall_speed}, scale_vec)
     msg.post(drop, "set_parent", { parent_id = go.get_id() })
     if target_sandwich ~= nil then
     	msg.post(drop, "set_target", { target = target_sandwich })
     	pprint(target_sandwich)
     end
end

local function ketchup_landed(self, drop_pos, target)
	local crumbs = factory.create("#crumbs_factory",drop_pos, nil, {color = vmath.vector4(0.61, 0.02, 0.12, 1)}, scale_vec)
	play_sound(self, "#splat")
	if target ~= nil then
		msg.post(target, "add_plus", {plus_type = 5})
	end
end

function update(self, dt)
    if state == 1 then
    	-- Normal state
    	ingredient_timer = ingredient_timer + dt
    	if ingredient_timer > ingredient_interval then
    		ingredient_timer = ingredient_timer - ingredient_interval
    		local start_vector = vmath.vector3(-40,belt_y[num_belts],0.02)
    		if belt_speeds[num_belts] < 0 then
    			start_vector.x = 360
    		end
    		local ingredient_type = ingredient_distribution[math.random(#ingredient_distribution)]
    		local ig = factory.create("#ingredient_factory",start_vector, nil,
    			{type = ingredient_type, speed = belt_speeds[num_belts]}, scale_vec)
			msg.post(ig, "set_parent", { parent_id = go.get_id() })
			table.insert(ingredients,ig)
    	end
    	if condiment_interval > 0 then
    		condiment_timer = condiment_timer + dt
    		if condiment_timer > condiment_interval then
    			condiment_timer = condiment_timer - condiment_interval
    			local condiment_type = condiment_dist[math.random(#condiment_dist)] + 1
    			local belt_num = math.random(num_belts-1)
    			local start_vector = vmath.vector3(0,0,0.01)
    			start_vector.y = belt_y[belt_num]
    			local end_x
    			if belt_speeds[belt_num] > 0 then
    				start_vector.x = -60
    				end_x = 700
    			else
    				start_vector.x = 700
    				end_x = -60
    			end
    			local co = factory.create("#condiment_factory",start_vector, nil,
    			{type = condiment_type, speed = belt_speeds[belt_num]*1.6, end_x = end_x, belt_num = belt_num}, scale_vec)
				msg.post(co, "set_parent", { parent_id = go.get_id() })
				table.insert(condiments,co)
    		end
    	end
    	if animal_interval > 0 then
    		animal_timer = animal_timer + dt
    		if animal_timer > animal_interval then
    			animal_timer = animal_timer - animal_interval
    			local animal_type = animal_dist[math.random(#animal_dist)] + 1
    			local animal = nil
    			if animal_type == 1 then
    				animal = spawn_fly(self)
    			elseif animal_type == 2 then
    				animal = spawn_goo(self)
    			elseif animal_type == 3 then
    				animal = spawn_ketchup(self)
    			end
    			if animal == nil then
    				-- Nothing
    			else
    				table.insert(animals,animal)
    			end
    		end
    	end
    elseif state == 2 then
    	-- Halted state
    end
end

local function remove_ingredient(self, ig)
	for i=#ingredients,1,-1 do
		if ingredients[i] == ig then
			table.remove(ingredients,i)
			go.delete(ig)
		end
	end
end

local function remove_sandwich(self, sw)
	for i=#sandwiches,1,-1 do
		if sandwiches[i] == sw then
			table.remove(sandwiches,i)
			go.delete(sw)
		end
	end
end

local function remove_condiment(self, co)
	for i=#condiments,1,-1 do
		if condiments[i] == co then
			table.remove(condiments,i)
			go.delete(co)
		end
	end
end

local function remove_animal(self, an)
	for i=#animals,1,-1 do
		if animals[i] == an then
			table.remove(animals,i)
			go.delete(an)
		end
	end
end

local function clean_up(self)
	-- Called when leaving game
	go.delete_all(belts)
	go.delete_all(plates)
	go.delete_all(ingredients)
	go.delete_all(sandwiches)
	go.delete_all(plate_catchers)
	go.delete_all(condiments)
	go.delete_all(animals)
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end

local function move_sandwich_along(self, sandwich, belt_num, stuck)
	msg.post(sandwich, "land_on_belt", {speed = belt_speeds[belt_num],
		belt_num = belt_num, stuck = stuck})
end

local function check_for_condiments(self, sandwich, belt_num)
	local sand_pos = go.get_world_position(sandwich)
	for i=#condiments,1,-1 do
		local script_url = msg.url(nil, condiments[i], "script")
		if go.get(script_url, "belt_num") == belt_num then
			local co = condiments[i]
			local cond_pos = go.get_world_position(co)
			if (cond_pos.x - sand_pos.x)*(cond_pos.x - sand_pos.x) < 1200 then
				play_sound(self, "#splat")
				table.remove(condiments,i)
				local ptype = go.get(script_url, "type")
				local crumbs = factory.create("#crumbs_factory",cond_pos, nil, {color = condiment_colors[ptype]}, scale_vec)
				go.delete(co)
				msg.post(sandwich, "add_plus", {plus_type = ptype})
			end
		end
	end
end

local function check_for_goo(self, sandwich, belt_num)
	local sand_pos = go.get_world_position(sandwich)
	local stuck = false
	for i,an in ipairs(animals) do
		local script_url = msg.url(nil, an, "script")
		if go.get(script_url, "type") == 2 and belt_num == go.get(script_url, "belt_num") then
			local an_pos = go.get_world_position(an)
			if (an_pos.x - sand_pos.x)*(an_pos.x - sand_pos.x) < 1200 then
				stuck = true
				play_sound(self, "#splat")
				local crumbs = factory.create("#crumbs_factory",sand_pos, nil, {color = vmath.vector4(0.3, 0.3, 0.3, 1)}, scale_vec)				
			end
		end
	end
	return stuck
end

local function drop_to_belt(self, sandwich, belt_num)
	local sand_pos = go.get_position(sandwich)
	local world_sand_pos = go.get_world_position(sandwich)
	local fall_height = world_sand_pos.y - belt_y[belt_num]
	local fall_time = fall_height / fall_speed
	go.animate(sandwich,"position.y",go.PLAYBACK_ONCE_FORWARD,2*belt_y[belt_num],
		fall_easing_vec,fall_time,0,
			function()
				play_sound(self, "#land")
				check_for_condiments(self, sandwich, belt_num)
				local stuck = check_for_goo(self, sandwich, belt_num)
				move_sandwich_along(self,sandwich,belt_num,stuck)
			end)
end

local function drop_to_sandwich(self, sandwich, target, belt_num)
	local world_sand_pos = go.get_world_position(sandwich)
	local script_url = msg.url(nil, target, "script")
	local end_y = belt_y[belt_num] + go.get(script_url, "slice_height")
	local fall_height = world_sand_pos.y - end_y
	local fall_time = fall_height / fall_speed
	local base_pos = go.get_world_position(target)
	local new_x = base_pos.x + belt_speeds[belt_num] * 0.5 * fall_time
	msg.post(target, "block")
	go.animate(sandwich,"position.x",go.PLAYBACK_ONCE_FORWARD,2*new_x,
		go.EASING_LINEAR, fall_time)
	go.animate(sandwich,"position.y",go.PLAYBACK_ONCE_FORWARD,2*end_y,
		fall_easing_vec,fall_time,0,
			function()
				play_sound(self, "#land")
				msg.post(sandwich, "transfer", {target = target})
				remove_sandwich(self, sandwich)
			end)
end

local function drop_off_screen(self, sandwich)
	local world_sand_pos = go.get_world_position(sandwich)
	local script_url = msg.url(nil, sandwich, "script")
	local end_y = -40 - go.get(script_url, "slice_height")
	local fall_time = (world_sand_pos.y - end_y) / fall_speed
	go.animate(sandwich,"position.z",go.PLAYBACK_ONCE_FORWARD,0.9,
		go.EASING_LINEAR, fall_time)
	go.animate(sandwich,"position.y",go.PLAYBACK_ONCE_FORWARD,2*end_y,
		fall_easing_vec,fall_time,0,
			function()
				remove_sandwich(self, sandwich)
			end)
end

local function check_for_completeness(self, plate, plate_slices, plate_pluses)
	local visible_order_list = {}
	local visible_order_nums = {}
	local order_types = lev_data["orders"]
	for i=1,3 do
		if self.visible_orders[i] > 0 then
			table.insert(visible_order_nums, self.visible_orders[i])
			table.insert(visible_order_list, order_types[self.visible_orders[i]])
		end
	end
	local plus_score = 0
	for i,s in ipairs(plate_pluses) do
		plus_score = plus_score + condiment_scores[s]
		if s == 6 then
			-- Fly. Mark slices as unacceptable.
			plate_slices[1] = 1000
		end
	end
	if #visible_order_list > 0 then
		local mismatch_count = 0
		local exact_match = 0
		local possible_points
		for i=1,#visible_order_nums do
			-- Build a list of wanted slice types
			local type_list = {}
			-- Reverse order for comparison
			for j=string.len(visible_order_list[i]),1,-1 do
				table.insert(type_list,visible_order_list[i]:sub(j,j)+1)
			end
			-- Now compare it to what we have
			local num_matches = 0
			possible_points = plus_score -- Base score
			local points_array = {}
			for j=1,#plate_slices do
				points_array[j] = 0
				if j <= #type_list and plate_slices[j] == type_list[j] then
					-- Same and in same place
					type_list[j] = 0
					num_matches = num_matches + 1
					points_array[j] = 15 -- Black score
				end
			end
			for j=1,#plate_slices do
				if points_array[j] == 0 then
					for k=1,#type_list do
						if plate_slices[j] == type_list[k] then
							-- Same but in wrong place
							type_list[k] = 0
							num_matches = num_matches + 1
							points_array[j] = 5 -- White score
							break
						end
					end
				end
			end
			for j,s in ipairs(points_array) do
				possible_points = possible_points + s
			end
			if num_matches == #type_list and #type_list == #plate_slices then
				exact_match = visible_order_nums[i]
				break
			elseif num_matches < #plate_slices then
				mismatch_count = mismatch_count + 1
			end
		end
		if exact_match > 0 then
			-- Sandwich complete
			play_sound(self, "#score")
			msg.post(plate,"completed")
			msg.post("game#gui","order_done", {order_num = exact_match, points = possible_points})
			for i=1,3 do
				if self.visible_orders[i] == exact_match then
					self.visible_orders[i] = 0
				end
			end
			for i=1,num_plates do
				if plate == plate_catchers[i] then
					local catcher = factory.create("#sandwich_factory",go.get_world_position(plate), nil,
    					{type = 0}, scale_vec)
					msg.post(catcher, "set_parent", { parent_id = go.get_id() })
					plate_catchers[i] = catcher
				end
			end
			local pos = go.get_world_position(plate)
			local magn = 1 -- Starburst magnitude
			if possible_points >= 15 * #plate_slices then
				magn = 3
			elseif possible_points >= 10 * #plate_slices then
				magn = 2
			end
			local starburst = factory.create("#starburst_factory",pos, nil, {magnitude = magn}, self.scale_vec)
		elseif mismatch_count == #visible_order_nums then
			play_sound(self, "#error")
			msg.post(plate,"mismatch")
			local hand_pos = go.get_world_position(plate)
			hand_pos.y = -30
			hand_pos.z = 0.95
			local hand = factory.create("#sweephand_factory",hand_pos, nil,{}, scale_vec)
			go.set_rotation(vmath.quat_rotation_z(1.5), hand)
			msg.post(hand, "set_parent", { parent_id = go.get_id() })
			go.animate(hand, "rotation", go.PLAYBACK_ONCE_FORWARD, vmath.quat_rotation_z(-1.5), go.EASING_LINEAR, 0.4, 0,
				function()
					go.delete(hand)
				end)
		end
	end
end

local function drop_to_plate(self, sandwich, plate)
	local world_sand_pos = go.get_world_position(sandwich)
	local script_url = msg.url(nil, plate, "script")
	local world_plate_pos = go.get_world_position(plate)
	local end_y = world_plate_pos.y + go.get(script_url, "slice_height")
	local fall_time = (world_sand_pos.y - end_y) / fall_speed
	go.animate(sandwich,"position.x",go.PLAYBACK_ONCE_FORWARD,2*world_plate_pos.x,
		go.EASING_LINEAR, fall_time)
	go.animate(sandwich,"position.y",go.PLAYBACK_ONCE_FORWARD,2*end_y,
		fall_easing_vec,fall_time,0,
			function()
				play_sound(self, "#land")
				msg.post(sandwich, "transfer", {target = plate})
				remove_sandwich(self, sandwich)
			end)
end

local function try_to_drop_sandwich(self, sandwich, current_belt)
	play_sound(self, "#knock")
	
	-- Notify flies
	for i,s in ipairs(animals) do
		msg.post(s,"cancel_target",{target = sandwich})
	end

	if current_belt > 1 then
		local nearest_sandwich = null
		local min_dist = 1600
		local world_sand_pos = go.get_world_position(sandwich)
		local base_height = world_sand_pos.y - belt_y[current_belt-1]
		for i,s in ipairs(sandwiches) do
			local script_url = msg.url(nil, s, "script")
			if go.get(script_url, "belt_num") == current_belt - 1 and
				go.get(script_url, "sandwich_state") == 1 then
				local fall_height = base_height - go.get(script_url, "slice_height")
				local fall_time = fall_height / fall_speed
				local base_pos = go.get_world_position(s)
				local new_x = base_pos.x + belt_speeds[current_belt-1] * 0.5 * fall_time
				local dist = (new_x - world_sand_pos.x) * (new_x - world_sand_pos.x)
				if dist < min_dist then
					min_dist = dist
					nearest_sandwich = s
				end
			end
		end
		if nearest_sandwich == null then
			drop_to_belt(self, sandwich, current_belt-1)
		else
			drop_to_sandwich(self, sandwich, nearest_sandwich, current_belt-1)
		end
	else
		-- Try to drop to bottom plate
		local best_ix = 0
		local min_dist2 = 2500
		local sx = go.get_position(sandwich).x
		for i = 1,#plate_x do
  			local dist2 = (sx - plate_x[i])*(sx - plate_x[i])
  			if dist2 < min_dist2 then
  				min_dist2 = dist2
  				best_ix = i
  			end
		end
		if best_ix == 0 then
			drop_off_screen(self, sandwich)
		else
			drop_to_plate(self, sandwich, plate_catchers[best_ix])
		end
	end
end

local function create_slice(self, pos, slice_type)
	local swch = factory.create("#sandwich_factory",pos, nil,
    			{type = slice_type}, scale_vec)
	msg.post(swch, "set_parent", { parent_id = go.get_id() })
	table.insert(sandwiches,swch)
	play_sound(self, "#chop")
	try_to_drop_sandwich(self, swch, num_belts)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("activate") then
    	activate(self, message.level)
	elseif message_id == hash("create_slice") then
    	create_slice(self, message.pos, message.type)
    elseif message_id == hash("deactivate") then
    	deactivate(self)
   	elseif message_id == hash("halt") then
    	halt_everything(self)
    elseif message_id == hash("remove_ingredient") then
    	remove_ingredient(self,message.ingredient)
    elseif message_id == hash("remove_sandwich") then
    	remove_sandwich(self,message.sandwich)
    elseif message_id == hash("remove_condiment") then
    	remove_condiment(self,message.condiment)
    elseif message_id == hash("remove_animal") then
    	remove_animal(self,message.animal)
    elseif message_id == hash("drop_sandwich") then
    	try_to_drop_sandwich(self,message.sandwich, message.belt_num)
    elseif message_id == hash("clean_up") then
    	clean_up(self)
    elseif message_id == hash("replay") then
    	activate(self, level)
    elseif message_id == hash("get_next_order") then
    	get_next_order(self)
    elseif message_id == hash("check_for_completeness") then
    	check_for_completeness(self, message.plate, message.plate_slices,
    		message.plate_pluses)
    elseif message_id == hash("score_counted") then
    	do_rating(self, message.score)
    elseif message_id == hash("drop_ketchup") then
    	drop_ketchup(self, message.bottle)
    elseif message_id == hash("ketchup_landed") then
    	ketchup_landed(self, message.drop_pos, message.target)
    end
end
@main/game.script" 