
ÆQ
¬Qlocal offscreen_pos
local timer_started = false
local normal_countdown = true
local score_timer
local timer
local max_time
local level_ended = false
local button_pressed = 0
local dialog_buttons = {"home_button","replay_button","forward_button"}
local orders_visible = {0,0,0}
local screen_positions = {}

local burp_counter = 0
local burp_max = 0
local score = 0

local can_go_forward = true

local slice_frames = {hash("slice"), hash("ham"), hash("lettuce"),
	hash("cheese"), hash("brownloaf"), hash("chicken"),
	hash("roast"), hash("whiteloaf"),
	hash("sausage"), hash("porkbelly")}
	
local slice_order = {{1},{2,1},{2,1,3},{3,2,4,1},{3,2,4,1,5}}

local kitchen_text_colors = {vmath.vector4(0, 0, 0, 1),
	 vmath.vector4(1, 1, 1, 1),
	 vmath.vector4(0, 0, 0, 1)}

local result_holder = 0

local function reset_clock(self)
	local clock_hand = gui.get_node("clock_hand")
	gui.set_rotation(gui.get_node("clock_hand"), vmath.vector3(0,0,0))
	timer = 0
	self.score = 0
	gui.set_text(gui.get_node("score_text"), "0")
end

local function start_clock(self, m_time)
	self.result_holder = 0
	timer = 0
	self.normal_countdown = true
	timer_started = true
	max_time = m_time
	msg.post("game#script","get_next_order")
end

local function stop_clock(self)
	timer_started = false
end

local function hide_dialog(self)
	msg.post(".", "release_input_focus")
	gui.set_enabled(gui.get_node("dialog"), false)
end

local function play_burps(self)
	if self.burp_counter < self.burp_max then
		self.burp_counter = self.burp_counter + 1
		gui.animate(gui.get_node("bubble" .. self.burp_counter), gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_OUTQUAD, 1,
			0, play_burps, gui.PLAYBACK_ONCE_FORWARD)
		gui.play_flipbook(gui.get_node("mouth"), "burp")
		if settings_table["sound_on"] then
			msg.post("/game#burp", "play_sound")
		end
	else
		msg.post(".", "acquire_input_focus")
	end
end

local function show_dialog(self, result)
	self.burp_counter = 0
	self.burp_max = result
	level_ended = true
	gui.set_enabled(gui.get_node("dialog"), true)
	local dialog_holder = gui.get_node("dialog_holder")	
	local from_color = gui.get_color(dialog_holder)
	from_color.w = 0
	local forward_button_color = vmath.vector4(1, 1, 1, 1)
	local score_string = settings_table["scores"]
	if result == 0 and string.sub(score_string,level,level) == "0" then
		forward_button_color.w = 0.5
		can_go_forward = false
	else
		can_go_forward = true
	end
	gui.set_color(gui.get_node("forward_button"), forward_button_color)
	if (result == 0) then
		if settings_table["sound_on"] then
			msg.post("/game#fail", "play_sound")
		end
		for i=1,3 do
			gui.set_enabled(gui.get_node("outline" .. i), false)
			gui.set_enabled(gui.get_node("bubble" .. i), false)
		end
		gui.set_enabled(gui.get_node("fail"), true)
		gui.play_flipbook(gui.get_node("mouth"), "tongue")
	else
		for i=1,3 do
			gui.set_enabled(gui.get_node("outline" .. i), true)
			gui.set_color(gui.get_node("bubble" .. i), from_color)
			gui.set_enabled(gui.get_node("bubble" .. i), true)
		end
		gui.set_enabled(gui.get_node("fail"), false)
	end
	gui.set_color(dialog_holder, from_color)
	local to_color = gui.get_color(dialog_holder)
	to_color.w = 1.0
	local to_scale = gui.get_scale(dialog_holder)
	to_scale.x = to_scale.x*1.15
	to_scale.y = to_scale.y*1.15
	gui.animate(dialog_holder, gui.PROP_COLOR, to_color, gui.EASING_LINEAR, 0.3)
	gui.animate(dialog_holder, gui.PROP_SCALE, to_scale, gui.EASING_LINEAR, 0.6, 0, play_burps, gui.PLAYBACK_ONCE_PINGPONG)
end

local function timed_out(self)
	stop_clock(self)
	msg.post("game#script","halt")
	show_dialog(self, 0)
end

local function activate(self)
	-- Move order notes off screen
	-- and clear positions
	for i=1,3 do
		gui.set_position(gui.get_node("order" .. i),offscreen_pos)
		orders_visible[i] = 0
	end
	
	reset_clock(self)
	hide_dialog(self)
	msg.post("game#gui","enable")
end

local function deactivate(self)
	-- Hide level indicator
	gui.set_enabled(gui.get_node("number"), false)
	msg.post("game#gui","disable")
end


function init(self)
	local order1 = gui.get_node("order1")
	offscreen_pos = gui.get_position(order1)
	offscreen_pos.x = -gui.get_width(order1)
	for i=1,3 do
		screen_positions[i] = gui.get_position(gui.get_node("order" .. i))
	end
    deactivate(self)
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
    -- Handle clock here
    if timer_started then
    	if self.normal_countdown then
    		timer = timer + dt
    		gui.set_rotation(gui.get_node("clock_hand"), vmath.vector3(0,0,-timer*360.0/max_time))
    		if timer > max_time then
    			timed_out(self)
    		end
    	else
    		-- Quick countdown at finish
    		timer = timer + 20*dt
    		self.score_timer = self.score_timer + 20*dt
    		if self.score_timer > 2.0 then
    			self.score_timer = self.score_timer - 2.0
    			self.score = self.score + 1
    			gui.set_text(gui.get_node("score_text"), "" .. self.score)
    		end
    		gui.set_rotation(gui.get_node("clock_hand"), vmath.vector3(0,0,-timer*360.0/max_time))
    		if timer > max_time then
    			gui.set_rotation(gui.get_node("clock_hand"), vmath.vector3(0,0,0))
    			stop_clock(self)
    			msg.post("game#script", "score_counted", {score = self.score})
    		end
    	end
    end
end

local function check_for_more_orders(self)
	if orders_visible[1] == 0 or orders_visible[2] == 0 or orders_visible[3] == 0 then
		msg.post("game#script","get_next_order")
	end
end

local function show_order(self, order_num, order_content)
	local ix = 0
	for i=3,1,-1 do
		if orders_visible[i] == 0 then
			ix = i
		end
	end
	if ix > 0 then
		for j = 1,5 do
			local slice = gui.get_node("layer" .. (ix*5-5+j))
			if j > string.len(order_content) then
				-- Don't show slice
				gui.set_enabled(slice, false)
			else
				-- Show slice
				local o = slice_order[string.len(order_content)][j]
				gui.set_enabled(slice, true)
				gui.play_flipbook(slice, slice_frames[order_content:sub(o,o)+1])
			end
		end
		orders_visible[ix] = order_num
		local order_node = gui.get_node("order" .. ix)
		gui.set_color(order_node, vmath.vector4(1, 1, 1, 1))
		gui.set_position(order_node, offscreen_pos)
		gui.animate(order_node, gui.PROP_POSITION, screen_positions[ix], gui.EASING_OUTQUAD,
			0.8, 0, check_for_more_orders)
		if settings_table["sound_on"] then
			msg.post("/game#slide", "play_sound")
		end
	else
		print("Problem showing order")
	end
end

local function show_level(self, lev_num)
	local kitchen_num = 1+math.floor((lev_num-1)/12)
	gui.set_text(gui.get_node("num_text"), "" .. lev_num)
	gui.set_color(gui.get_node("num_text"), kitchen_text_colors[kitchen_num])
	local node = gui.get_node("number")
	gui.set_color(node, vmath.vector4(1, 1, 1, 0))
	gui.set_enabled(node, true)
	gui.play_flipbook(node, "slice" .. kitchen_num .. "_released")
	gui.animate(node, "color", vmath.vector4(1, 1, 1, 1), gui.EASING_OUTQUAD, 2.0, 0, null, gui.PLAYBACK_ONCE_PINGPONG)
end

local function order_done(self, order_num, points)
	for i=1,3 do
		if orders_visible[i] == order_num then
			orders_visible[i] = 0
			local order_node = gui.get_node("order" .. i)
			gui.animate(order_node, "color", vmath.vector4(1, 1, 1, 0), gui.EASING_LINEAR, 1.0, 0, check_for_more_orders, gui.PLAYBACK_ONCE_FORWARD)
		end
	end
	self.score = self.score + points
	gui.set_text(gui.get_node("score_text"), "" .. self.score)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("activate") then
    	activate(self)
    elseif message_id == hash("deactivate") then
    	deactivate(self)
    elseif message_id == hash("start_clock") then
    	start_clock(self, message.max_time)
    elseif message_id == hash("show_order") then
    	show_order(self, message.order_num, message.order_content)
    elseif message_id == hash("show_level") then
    	show_level(self, message.level_num)
    elseif message_id == hash("order_done") then
    	order_done(self, message.order_num, message.points)
    elseif message_id == hash("level_done") then
    	self.score_timer = 0
    	self.normal_countdown = false
    elseif message_id == hash("rating_done") then
    	show_dialog(self, message.rating)
    end
end

function on_input(self, action_id, action)
    if action_id == hash("mouse") and level_ended then
    	if action.pressed or action.released then
    		local button_released = 0
    		if button_pressed > 0 then
    			button_released = button_pressed
    		end
    		local back_pos = gui.get_position(gui.get_node("dialog"))
    		local back_scale = gui.get_scale(gui.get_node("dialog"))
    		back_scale.y = back_scale.y * ratio / 0.5625
    		for i=1,3 do
    			local button = gui.get_node(dialog_buttons[i])
    			local but_pos = gui.get_position(button)
    			local but_size = gui.get_size(button)
    			local dx = action.x - (but_pos.x*back_scale.x+back_pos.x)
    			local dy = action.y - (but_pos.y*back_scale.y+back_pos.y)
    			if dx < 0.5*but_size.x*back_scale.x and dx > -0.5*but_size.x*back_scale.x and
    				dy < 0.5*but_size.y*back_scale.y and dy > -0.5*but_size.y*back_scale.y then
    				if action.pressed then
    					if i == 1 then
    						gui.play_flipbook(button, "home_pressed")
    					elseif i == 2 then
    						gui.play_flipbook(button, "replay_pressed")
    					elseif can_go_forward then
    						gui.play_flipbook(button, "forward_pressed")
    					end
    					button_pressed = i
    				else
    					if button_pressed == 1 then
    						-- Go back to menu
    						msg.post("controller#script", "show_menu_from_game")
    					elseif button_pressed == 2 then
    						msg.post("controller#script", "replay_level")
    					elseif can_go_forward then
    						msg.post("controller#script", "next_level")
    					end
    				end
    			end
    		end
    		
    		if action.released then
    			button_pressed = 0
    		end
    		
    		if button_released > 0 then
    			if button_released == 1 then
    				gui.play_flipbook(gui.get_node("home_button"), "home_released")
    			elseif button_released == 2 then
    				gui.play_flipbook(gui.get_node("replay_button"), "replay_released")
    			else
    				gui.play_flipbook(gui.get_node("forward_button"), "forward_released")
    			end
    			button_released = 0
    			-- Play click sound
    			if settings_table["sound_on"] then
					msg.post("/main_menu#click", "play_sound")
				end
    		end
    	end
    end
end
@main/game.gui_script" 