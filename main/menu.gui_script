local button_pressed = 0

local button_names = {"play_button","sound_button","music_button"}

function init(self)
    -- Add initialization code here
    -- Remove this function if not needed
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
    -- Add update code here
    -- Remove this function if not needed
end

local function start_music(self)
	if settings_table["music_on"] then
		msg.post("#menu_song", "play_sound")
	end
end

local function stop_music(self)
	msg.post("#menu_song", "stop_sound")
end

local function play_click(self)
	if settings_table["sound_on"] then
		msg.post("#click", "play_sound")
	end
end

local function activate(self)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.15, 0.15, 0.15, 0) } )
	msg.post(".", "acquire_input_focus")
	msg.post("main_menu#gui","enable")
	
	if settings_table["sound_on"] then
    	gui.play_flipbook(gui.get_node("sound_button"), "sound_released")
    else
    	gui.play_flipbook(gui.get_node("sound_button"), "no_sound_released")
    end
	if settings_table["music_on"] then
    	gui.play_flipbook(gui.get_node("music_button"), "music_released")
    else
    	gui.play_flipbook(gui.get_node("music_button"), "no_music_released")
    end
	
	start_music(self)
end

local function deactivate(self)
	stop_music(self)
	msg.post(".", "release_input_focus")
	msg.post("main_menu#gui","disable")
end

function on_message(self, message_id, message, sender)
    if message_id == hash("activate") then
    	activate(self)
    elseif message_id == hash("deactivate") then
    	deactivate(self)
    end
end

function on_input(self, action_id, action)
    if action_id == hash("mouse") and (action.pressed or action.released) then
    	local button_released = 0
    	if button_pressed > 0 and action.released then
    		button_released = button_pressed
    	end
    	local fence_pos = gui.get_position(gui.get_node("fence"))
    	local fence_scale = gui.get_scale(gui.get_node("fence"))
    	for i=1,3 do
    		local button = gui.get_node(button_names[i])
    		local but_pos = gui.get_position(button)
    		local but_size = gui.get_size(button)
    		
    		local dx = action.x - (fence_pos.x + but_pos.x*fence_scale.x)
    		local dy = action.y - (fence_pos.y + but_pos.y*fence_scale.x)
    		if dx < but_size.x*0.5*fence_scale.x and dx > -but_size.x*0.5*fence_scale.x and
    			dy < but_size.y*0.5*fence_scale.y and dy > -but_size.y*0.5*fence_scale.y then
    			if action.pressed then
    				button_pressed = i
    				if i == 1 then
    					gui.play_flipbook(button, "play_pressed")
    				elseif i == 2 then
    					if settings_table["sound_on"] then
    						gui.play_flipbook(button, "sound_pressed")
    					else
    						gui.play_flipbook(button, "no_sound_pressed")
    					end
  					elseif i == 3 then
    					if settings_table["music_on"] then
    						gui.play_flipbook(button, "music_pressed")
    					else
    						gui.play_flipbook(button, "no_music_pressed")
    					end
    				end
    			else
    				if button_pressed == i then
    					-- Tapped button
    					if i == 1 then
    						-- Play button
    						msg.post("controller#script", "show_levels")
    					elseif i == 2 then
    						-- Sound button
    						settings_table["sound_on"] = not settings_table["sound_on"]
    						local settings_path = sys.get_save_file("Inbread", "settings")
							sys.save(settings_path, settings_table)
    					elseif i == 3 then
    						-- Music button
    						settings_table["music_on"] = not settings_table["music_on"]
    						if settings_table["music_on"] then
    							start_music(self)
    						else
    							stop_music(self)
    						end
    						local settings_path = sys.get_save_file("Inbread", "settings")
							sys.save(settings_path, settings_table)
    					end
    				end
    			end
			end
    	end
    	if button_released > 0 then
    		button = gui.get_node(button_names[button_released])
    		if button_released == 1 then
    			gui.play_flipbook(button, "play_released")
    		elseif button_released == 2 then
    		 	if settings_table["sound_on"] then
    				gui.play_flipbook(button, "sound_released")
    			else
    				gui.play_flipbook(button, "no_sound_released")
    			end
			elseif button_released == 3 then
    		 	if settings_table["music_on"] then
    				gui.play_flipbook(button, "music_released")
    			else
    				gui.play_flipbook(button, "no_music_released")
    			end
    		end
    		play_click(self)
    		button_pressed = 0
		end    	
    end
end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
