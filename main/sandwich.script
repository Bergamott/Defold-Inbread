go.property("type", 0)
go.property("belt_num", 0)
go.property("sandwich_state", 0)
go.property("slice_height", 0)
local slices = {}
local slice_types = {}
local scale_vec
local speed
local slice_width = 56
local tap_margin = 10
local pluses = {}
local plus_types = {}
local plus_interval = 24

local click_active = true

local slice_frames = {hash("slice"), hash("ham"), hash("lettuce"),
	hash("cheese"), hash("brownloaf"), hash("chicken"),
	hash("roast"), hash("whiteloaf"),
	hash("sausage"), hash("porkbelly")}

local function land_on_belt(self,spd,b_num,stuck)
	click_active = true -- In case there is only one sandwich
	self.sandwich_state = 1
	self.speed = spd
	self.belt_num = b_num
	if not stuck then
		msg.post(".", "acquire_input_focus")
	end
end

function init(self)
	self.slices = {}
	self.slice_types = {}
	self.pluses = {}
	self.plus_types = {}
	self.sandwich_state = 0
	self.scale_vec = go.get_scale_vector()
	if self.type > 0 then
    	self.slices[1] = factory.create("#slice_factory", go.get_position(), nil, {}, self.scale_vec)
		msg.post(self.slices[1], "set_parent", { parent_id = go.get_id() })
		msg.post(self.slices[1], "play_animation", {id = slice_frames[self.type]})
		self.slice_height = 24 * self.scale_vec.y
		self.slice_types[1] = self.type
	end
end

function final(self)
	self.sandwich_state = 2
	go.delete_all(self.slices)
	go.delete_all(self.pluses)
end

local function remove_me(self)
	self.sandwich_state = 2
	msg.post(".", "release_input_focus")
	msg.post("game#script", "remove_sandwich", {sandwich = go.get_id()})
end

local function combine_with(self, sl_typ, pl_typ)
	-- Slices
	local l = #self.slices
	local temp_pos = go.get_world_position()
	temp_pos.y = temp_pos.y + self.slice_height
	for i=1,#sl_typ do
		l = l + 1
		self.slices[l] = factory.create("#slice_factory", temp_pos, nil, {}, self.scale_vec)
		msg.post(self.slices[l], "set_parent", { parent_id = go.get_id() })
		msg.post(self.slices[l], "play_animation", {id = slice_frames[sl_typ[i]]})
		self.slice_height = self.slice_height + 24 * self.scale_vec.y
		temp_pos.y = temp_pos.y + 24 * self.scale_vec.y
		self.slice_types[l] = sl_typ[i]
	end
	-- Pluses
	if #pl_typ > 0 then
		-- Adjust pre-existing pluses
		for i, p in ipairs(self.pluses) do
			temp_pos = go.get_position(p)
			temp_pos.x = temp_pos.x - plus_interval*#pl_typ
			temp_pos.y = temp_pos.y + 48 * #sl_typ * self.scale_vec.y
  			go.set_position(temp_pos, p)
		end
		-- Put in new pluses
		temp_pos = go.get_world_position()
		temp_pos.y = temp_pos.y + self.slice_height + 30*self.scale_vec.y
		if pl_typ[i] == 6 then
			-- Fly should be slightly lower
			temp_pos.y = temp_pos.y - 8
		end
		temp_pos.x = temp_pos.x - plus_interval*0.5*(#self.pluses + #pl_typ - 1) + plus_interval*#self.pluses
		for i=1,#pl_typ do
			local plus = factory.create("#plus_factory", temp_pos, nil, {type = pl_typ[i]}, self.scale_vec)
			msg.post(plus, "set_parent", { parent_id = go.get_id() })
			table.insert(self.pluses, plus)
			table.insert(self.plus_types, pl_typ[i])
			temp_pos.x = temp_pos.x + plus_interval
		end
	end
	
	if self.belt_num == 0 then
		msg.post("game#script", "check_for_completeness",
			{plate_slices = self.slice_types, plate = go.get_id(),
			plate_pluses = self.plus_types})
	else
		-- Unblock
		self.sandwich_state = 1
	end
end

local function hand_gone_down(self)
	go.delete()
end

local function hand_gone_up(self)
	local my_pos = go.get_world_position()
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, my_pos.y-150, go.EASING_LINEAR, 1.0, 0, hand_gone_down)
end

local function throw_away_slices(self)
	go.delete_all(self.pluses)
	for i,s in ipairs(self.slices) do
		go.animate(s, "rotation", go.PLAYBACK_ONCE_FORWARD, vmath.quat_rotation_z(1.8+4.2*math.random()), go.EASING_LINEAR, 0.8, 0.2)
		go.animate(s, "position.y", go.PLAYBACK_ONCE_PINGPONG, 100+math.random(400), go.EASING_OUTQUAD, 0.8, 0.2)
		go.animate(s, "position.x", go.PLAYBACK_ONCE_FORWARD, 640.0, go.EASING_LINEAR, 0.7, 0.2,
		function()
				go.delete(s)
			end)
	end
	self.slices = {}
	self.pluses = {}
	self.slice_types = {}
	self.plus_types = {}
	self.slice_height = 0
end

local function sandwich_completed(self)
	local l = #self.slices + 1
	local temp_pos = go.get_world_position()
	temp_pos.z = 0.5
	self.slices[l] = factory.create("#handplate_factory", temp_pos, nil, {}, self.scale_vec)
	msg.post(self.slices[l], "set_parent", { parent_id = go.get_id() })
	local my_pos = go.get_world_position()
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, my_pos.x+200, go.EASING_LINEAR, 3.2)
	go.animate(".", "position.y", go.PLAYBACK_ONCE_PINGPONG, my_pos.y+70, go.EASING_OUTQUAD, 0.8, 0, hand_gone_up)
end

function update(self, dt)
    if self.sandwich_state == 1 or self.sandwich_state == 3 then
    	local pos = go.get_position()
    	pos.x = pos.x + dt*self.speed
    	if (self.speed < 0 and pos.x < -80) or
    		(self.speed > 0 and pos.x > 720) then
    		self.sandwich_state = 2
    		msg.post("game#script", "remove_sandwich", {sandwich = go.get_id()})
    	else
    		go.set_position(pos)
    	end
    end
end

local function add_plus(self, ptype)
	-- Adjust pre-existing pluses
	for i, p in ipairs(self.pluses) do
		temp_pos = go.get_position(p)
		temp_pos.x = temp_pos.x - plus_interval
  		go.set_position(temp_pos, p)
	end
	local temp_pos = go.get_world_position()
	temp_pos.y = temp_pos.y + self.slice_height + 30*self.scale_vec.y
	if ptype == 6 then
		-- Fly should be slightly lower
		temp_pos.y = temp_pos.y - 8
	end
	temp_pos.x = temp_pos.x + #self.pluses * plus_interval * 0.5
	local plus = factory.create("#plus_factory", temp_pos, nil, {type = ptype}, self.scale_vec)
	msg.post(plus, "set_parent", { parent_id = go.get_id() })
	table.insert(self.pluses, plus)
	table.insert(self.plus_types, ptype)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("land_on_belt") then
    	land_on_belt(self, message.speed, message.belt_num, message.stuck)
    elseif message_id == hash("halt") then
    	self.sandwich_state = 2
    elseif message_id == hash("block") then
    	-- No touching until sandwich lands
    	self.sandwich_state = 3
    elseif message_id == hash("combine") then
    	combine_with(self, message.slice_types, message.plus_types)
    elseif message_id == hash("transfer") then
    	msg.post(message.target, "combine",
    		{slice_types = self.slice_types, plus_types = self.plus_types})
    elseif message_id == hash("completed") then
    	sandwich_completed(self)
    elseif message_id == hash("mismatch") then
    	throw_away_slices(self)
    elseif message_id == hash("add_plus") then
    	add_plus(self, message.plus_type)
    end
end

function on_input(self, action_id, action)
	if action.pressed and action_id == hash("mouse") and self.sandwich_state == 1 and click_active then
		local pos = go.get_position()
		local dx = pos.x*0.5 - action.x
		local dy = pos.y*0.5 - action.y
		
		local half_w = slice_width*0.5 + tap_margin
		local stack_height = self.slice_height + tap_margin
		if dx < half_w and dx > -half_w and dy < tap_margin and dy > -stack_height then
			click_active = false
			self.sandwich_state = 0
			msg.post(".", "release_input_focus")
			msg.post("game#script", "drop_sandwich", {sandwich = go.get_id(), belt_num = self.belt_num})
		end
	elseif action.released then
		click_active = true
	end
end

